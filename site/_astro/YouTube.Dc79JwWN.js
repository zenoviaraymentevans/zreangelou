import{r as S,R as g}from"./index.DddtCxX5.js";import{M as w,p as b,a as T,g as U,c as I,b as L}from"./Player._u6h4luJ.js";import"./jsx-runtime.CIMolHGP.js";import"./index.DpKhS-qi.js";/* empty css                       */import"./index.B0vZmPab.js";import"./index.Py3gQaBW.js";import"./index.DtUZoKqR.js";import"./index.Dp8Bw2RJ.js";import"./store.aycOQVLs.js";import"./index.bM7OrN6I.js";import"./player.CKjfIk3N.js";var O=Object.defineProperty,k=(o,t,e)=>t in o?O(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e,a=(o,t,e)=>(k(o,typeof t!="symbol"?t+"":t,e),e);const V="https://www.youtube.com/iframe_api",_="YT",v="onYouTubeIframeAPIReady",c=/[?&](?:list|channel)=([a-zA-Z0-9_-]+)/,f=/user\/([a-zA-Z0-9_-]+)\/?/,M=/youtube-nocookie\.com/,N="https://www.youtube-nocookie.com";class E extends S.Component{constructor(){super(...arguments),a(this,"callPlayer",I),a(this,"parsePlaylist",t=>{if(t instanceof Array)return{listType:"playlist",playlist:t.map(this.getID).join(",")};if(c.test(t)){const[,e]=t.match(c);return{listType:"playlist",list:e.replace(/^UC/,"UU")}}if(f.test(t)){const[,e]=t.match(f);return{listType:"user_uploads",list:e}}return{}}),a(this,"onStateChange",t=>{const{data:e}=t,{onPlay:y,onPause:h,onBuffer:d,onBufferEnd:u,onEnded:m,onReady:P,loop:r,config:{playerVars:i,onUnstarted:l}}=this.props,{UNSTARTED:p,PLAYING:n,PAUSED:s,BUFFERING:A,ENDED:C,CUED:D}=window[_].PlayerState;if(e===p&&l(),e===n&&(y(),u()),e===s&&h(),e===A&&d(),e===C){const R=!!this.callPlayer("getPlaylist");r&&!R&&(i.start?this.seekTo(i.start):this.play()),m()}e===D&&P()}),a(this,"mute",()=>{this.callPlayer("mute")}),a(this,"unmute",()=>{this.callPlayer("unMute")}),a(this,"ref",t=>{this.container=t})}componentDidMount(){this.props.onMount&&this.props.onMount(this)}getID(t){return!t||t instanceof Array||c.test(t)?null:t.match(w)[1]}load(t,e){const{playing:y,muted:h,playsinline:d,controls:u,loop:m,config:P,onError:r}=this.props,{playerVars:i,embedOptions:l}=P,p=this.getID(t);if(e){if(c.test(t)||f.test(t)||t instanceof Array){this.player.loadPlaylist(this.parsePlaylist(t));return}this.player.cueVideoById({videoId:p,startSeconds:b(t)||i.start,endSeconds:T(t)||i.end});return}U(V,_,v,n=>n.loaded).then(n=>{this.container&&(this.player=new n.Player(this.container,{width:"100%",height:"100%",videoId:p,playerVars:{autoplay:y?1:0,mute:h?1:0,controls:u?1:0,start:b(t),end:T(t),origin:window.location.origin,playsinline:d?1:0,...this.parsePlaylist(t),...i},events:{onReady:()=>{m&&this.player.setLoop(!0),this.props.onReady()},onPlaybackRateChange:s=>this.props.onPlaybackRateChange(s.data),onPlaybackQualityChange:s=>this.props.onPlaybackQualityChange(s),onStateChange:this.onStateChange,onError:s=>r(s.data)},host:M.test(t)?N:void 0,...l}))},r),l.events&&console.warn("Using `embedOptions.events` will likely break things. Use ReactPlayerâ€™s callback props instead, eg onReady, onPlay, onPause")}play(){this.callPlayer("playVideo")}pause(){this.callPlayer("pauseVideo")}stop(){document.body.contains(this.callPlayer("getIframe"))&&this.callPlayer("stopVideo")}seekTo(t,e=!1){this.callPlayer("seekTo",t),!e&&!this.props.playing&&this.pause()}setVolume(t){this.callPlayer("setVolume",t*100)}setPlaybackRate(t){this.callPlayer("setPlaybackRate",t)}setLoop(t){this.callPlayer("setLoop",t)}getDuration(){return this.callPlayer("getDuration")}getCurrentTime(){return this.callPlayer("getCurrentTime")}getSecondsLoaded(){return this.callPlayer("getVideoLoadedFraction")*this.getDuration()}render(){const{display:t}=this.props,e={width:"100%",height:"100%",display:t};return g.createElement("div",{style:e},g.createElement("div",{ref:this.ref}))}}a(E,"displayName","YouTube");a(E,"canPlay",L.youtube);export{E as default};
